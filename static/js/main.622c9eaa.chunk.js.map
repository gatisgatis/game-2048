{"version":3,"sources":["App.module.scss","helpers/helpers.ts","helpers/helpers-ui.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","PARSED_KEYS","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","makeOneDimensionArray","length","fill","times","Math","floor","output","i","push","addNewNumberInGame","arr","stopLoop","index","_","random","initGameGrid","splitArrayInRows","direction","rows","slice","row","j","mergeOneRow","oneRow","handlePressedKey","key","Object","keys","includes","prevGrid","newGrid","forEach","reverse","mergeNumbers","rowNoZeros","filter","number","zerosCount","rowZeros","newRow","moveNumbers","isEqual","calculateResult","reduce","res","num","calculateFontSize","size","calculateColor","green","blue","App","useState","pressedKey","setPressedKey","gameEnd","setGameEnd","gameWon","setGameWon","controlButtons","setControlButtons","grid","useRef","result","current","bestResult","keyboardFunction","event","useEffect","document","body","addEventListener","removeEventListener","isRightUnable","isLeftUnable","isUpUnable","isDownUnable","isGameOver","className","styles","contentWrapper","header","title","titleBig","titleSmall","type","restartButton","onClick","scores","best","currentScore","popupWrapper","popupCloseButton","popup","popupTitle","popupButton","gridWrapper","map","cell","style","backgroundColor","color","fontSize","uuid","controlsWrapper","controlButtonWrapper","controlButton","rules","showArrowsButton","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.622c9eaa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentWrapper\":\"App_contentWrapper__NRBO2\",\"popupWrapper\":\"App_popupWrapper__1KNUp\",\"popupCloseButton\":\"App_popupCloseButton__1A8qc\",\"popup\":\"App_popup__fnS2L\",\"popupTitle\":\"App_popupTitle__1dzie\",\"popupButton\":\"App_popupButton__C8dyt\",\"header\":\"App_header__2O_sm\",\"title\":\"App_title__1Hxva\",\"titleBig\":\"App_titleBig__3f4R2\",\"titleSmall\":\"App_titleSmall__1RXSO\",\"restartButton\":\"App_restartButton__rbdMu\",\"scores\":\"App_scores__2QYLi\",\"best\":\"App_best__32ga7\",\"gridWrapper\":\"App_gridWrapper__16nn9\",\"cell\":\"App_cell__Kvnv2\",\"number\":\"App_number__VIpar\",\"rules\":\"App_rules__27hDS\",\"showArrowsButton\":\"App_showArrowsButton__2JG6a\",\"controlsWrapper\":\"App_controlsWrapper__3RCl-\",\"controlButtonWrapper\":\"App_controlButtonWrapper__3SVrZ\",\"controlButton\":\"App_controlButton__1YJ25\"};","/* eslint-disable no-param-reassign */\r\nimport _ from 'lodash';\r\n\r\ntype Direction = 'up' | 'down' | 'left' | 'right';\r\n\r\nconst PARSED_KEYS: { [key: string]: Direction } = {\r\n  ArrowUp: 'up',\r\n  ArrowDown: 'down',\r\n  ArrowLeft: 'left',\r\n  ArrowRight: 'right',\r\n};\r\n\r\nexport const generate2or4randomly = () => {\r\n  return _.random(10, true) > 9 ? 4 : 2;\r\n};\r\n\r\nexport const makeOneDimensionArray = <T>(length: number, fill: T) => {\r\n  const times = Math.floor(length);\r\n  const output: T[] = [];\r\n  for (let i = 0; i < times; i++) {\r\n    output.push(fill);\r\n  }\r\n  return output;\r\n};\r\n\r\nexport const addNewNumberInGame = (arr: number[]) => {\r\n  const output = [...arr];\r\n\r\n  // while version\r\n  let stopLoop = false;\r\n  while (!stopLoop) {\r\n    const index = _.random(0, arr.length - 1);\r\n    if (!output[index]) {\r\n      output[index] = generate2or4randomly();\r\n      stopLoop = true;\r\n    }\r\n  }\r\n  // recursion version\r\n  //   const index = _.random(0, arr.length-1);\r\n  //   const output = [...arr];\r\n  //   if (output[index] === 0) {\r\n  //     output[index] = generate2or4randomly();\r\n  //   } else {\r\n  //     addNewNumberInGame(arr);\r\n  //   }\r\n  return output;\r\n};\r\n\r\nexport const initGameGrid = () => {\r\n  let output = makeOneDimensionArray(16, 0);\r\n  output = addNewNumberInGame(output);\r\n  return addNewNumberInGame(output);\r\n};\r\n\r\nexport const splitArrayInRows = (arr: number[], direction: Direction) => {\r\n  // array containing 4 game rows\r\n  const rows: number[][] = [];\r\n  // splits array in 4 rows\r\n  if (direction === 'left' || direction === 'right')\r\n    for (let i = 0; i < 4; i++) {\r\n      rows.push(arr.slice(i * 4, i * 4 + 4));\r\n    }\r\n  // splits array in 4 columns making them as rows temporary\r\n  if (direction === 'up' || direction === 'down') {\r\n    for (let i = 0; i < 4; i++) {\r\n      const row = [];\r\n      for (let j = 0; j < 4; j++) {\r\n        row.push(arr[i + j * 4]);\r\n      }\r\n      rows.push(row);\r\n    }\r\n  }\r\n  return rows;\r\n};\r\n\r\nexport const moveNumbers = (arr: number[], direction: Direction) => {\r\n  const output: number[] = [];\r\n  const rows = splitArrayInRows(arr, direction);\r\n  rows.forEach((row, index) => {\r\n    // filters out only non zero elements\r\n    const rowNoZeros = row.filter((number) => number);\r\n    // calculates zero count in that row\r\n    const zerosCount = 4 - rowNoZeros.length;\r\n    // makes corresponding zeros part of the row\r\n    const rowZeros = makeOneDimensionArray(zerosCount, 0);\r\n    // combines them according to given direction and push them in output array\r\n    let newRow: number[] = [];\r\n    if (direction === 'right') {\r\n      newRow = [...rowZeros, ...rowNoZeros];\r\n      output.push(...newRow);\r\n    } else if (direction === 'left') {\r\n      newRow = [...rowNoZeros, ...rowZeros];\r\n      output.push(...newRow);\r\n    } else if (direction === 'up') {\r\n      newRow = [...rowNoZeros, ...rowZeros];\r\n      for (let i = 0; i < 4; i++) {\r\n        output[i * 4 + index] = newRow[i];\r\n      }\r\n    } else {\r\n      newRow = [...rowZeros, ...rowNoZeros];\r\n      for (let i = 0; i < 4; i++) {\r\n        output[i * 4 + index] = newRow[i];\r\n      }\r\n    }\r\n  });\r\n  return output;\r\n};\r\n\r\nexport const mergeOneRow = (oneRow: number[]) => {\r\n  const row = [...oneRow];\r\n  for (let i = 3; i > 0; i--) {\r\n    for (let j = i - 1; j >= 0; j--) {\r\n      if (row[i] && row[j]) {\r\n        if (row[i] !== row[j]) {\r\n          break;\r\n        } else {\r\n          row[i] *= 2;\r\n          row[j] = 0;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return row;\r\n};\r\n\r\nexport const mergeNumbers = (arr: number[], direction: Direction) => {\r\n  const output: number[] = [];\r\n  const rows = splitArrayInRows(arr, direction);\r\n  rows.forEach((row, index) => {\r\n    switch (direction) {\r\n      case 'right':\r\n        output.push(...mergeOneRow(row));\r\n        break;\r\n      case 'left':\r\n        row.reverse();\r\n        output.push(...mergeOneRow(row).reverse());\r\n        break;\r\n      case 'up':\r\n        row.reverse();\r\n        row = mergeOneRow(row).reverse();\r\n        for (let i = 0; i < 4; i++) {\r\n          output[i * 4 + index] = row[i];\r\n        }\r\n        break;\r\n      case 'down':\r\n        row = mergeOneRow(row);\r\n        for (let i = 0; i < 4; i++) {\r\n          output[i * 4 + index] = row[i];\r\n        }\r\n        break;\r\n    }\r\n  });\r\n  return output;\r\n};\r\n\r\nexport const handlePressedKey = (arr: number[], key: string) => {\r\n  if (!Object.keys(PARSED_KEYS).includes(key)) {\r\n    return [...arr];\r\n  }\r\n  const direction = PARSED_KEYS[`${key}`];\r\n  const prevGrid = [...arr];\r\n  let newGrid = mergeNumbers(arr, direction);\r\n  newGrid = moveNumbers(newGrid, direction);\r\n  if (!_.isEqual(prevGrid, newGrid)) {\r\n    newGrid = addNewNumberInGame(newGrid);\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nexport const calculateResult = (arr: number[]) => {\r\n  return arr.reduce((res, num) => res + num, 0);\r\n};\r\n\r\nexport const isGameOver = (arr: number[]) => {\r\n  const isRightUnable = _.isEqual(arr, handlePressedKey(arr, 'ArrowRight'));\r\n  const isLeftUnable = _.isEqual(arr, handlePressedKey(arr, 'ArrowLeft'));\r\n  const isUpUnable = _.isEqual(arr, handlePressedKey(arr, 'ArrowUp'));\r\n  const isDownUnable = _.isEqual(arr, handlePressedKey(arr, 'ArrowDown'));\r\n  if (isUpUnable && isDownUnable && isLeftUnable && isRightUnable) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const isGameWon = (arr: number[]) => {\r\n  if (arr.includes(2048)) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n","export const calculateFontSize = (number: number) => {\r\n  let size = '5rem';\r\n  if (number > 99999) size = '1.5rem';\r\n  else if (number > 9999) size = '2rem';\r\n  else if (number > 999) size = '2.5rem';\r\n  else if (number > 99) size = '3rem';\r\n  else if (number > 9) size = '4rem';\r\n  return size;\r\n};\r\n\r\nexport const calculateColor = (number: number) => {\r\n  const red = 255 - number * 0.5;\r\n  const green = 200 + number * 0.5;\r\n  const blue = 200 + number * 0.2;\r\n  return `rgb(${red}, ${green}, ${blue})`;\r\n};\r\n","import React, { FC, useState, useEffect, useRef } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport styles from './App.module.scss';\r\nimport {\r\n  handlePressedKey,\r\n  calculateResult,\r\n  isGameOver,\r\n  isGameWon,\r\n  initGameGrid,\r\n} from './helpers/helpers';\r\nimport { calculateColor, calculateFontSize } from './helpers/helpers-ui';\r\n\r\nexport const App: FC = () => {\r\n  const [pressedKey, setPressedKey] = useState('');\r\n  const [gameEnd, setGameEnd] = useState(false);\r\n  const [gameWon, setGameWon] = useState(false);\r\n  const [controlButtons, setControlButtons] = useState(false);\r\n\r\n  const grid = useRef(initGameGrid());\r\n  const result = useRef(calculateResult(grid.current));\r\n  const bestResult = useRef(10000);\r\n\r\n  const keyboardFunction = (event: KeyboardEvent) => {\r\n    setPressedKey(event.key);\r\n  };\r\n\r\n  const addKeyBoardListener = () => {\r\n    document.body.addEventListener('keydown', keyboardFunction);\r\n  };\r\n\r\n  const removeKeyBoardListener = () => {\r\n    document.body.removeEventListener('keydown', keyboardFunction);\r\n  };\r\n\r\n  useEffect(() => {\r\n    addKeyBoardListener();\r\n    return () => {\r\n      removeKeyBoardListener();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (pressedKey) {\r\n      grid.current = handlePressedKey(grid.current, pressedKey);\r\n      result.current = calculateResult(grid.current);\r\n      if (isGameOver(grid.current)) {\r\n        setGameEnd(true);\r\n      }\r\n      if (isGameWon(grid.current)) {\r\n        setGameWon(true);\r\n      }\r\n      setPressedKey('');\r\n    }\r\n  }, [pressedKey]);\r\n\r\n  return (\r\n    <div className={styles.contentWrapper}>\r\n      <div className={styles.header}>\r\n        <div className={styles.title}>\r\n          <span className={styles.titleBig}>2048 </span>\r\n          <span className={styles.titleSmall}>THE GAME</span>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className={styles.restartButton}\r\n          onClick={() => {\r\n            grid.current = initGameGrid();\r\n            setPressedKey('restart');\r\n          }}\r\n        >\r\n          RESTART\r\n        </button>\r\n        <div className={styles.scores}>\r\n          <div className={styles.best}>BEST: {bestResult.current}</div>\r\n          <div className={styles.currentScore}>SCORE: {result.current}</div>\r\n        </div>\r\n      </div>\r\n      {gameEnd && (\r\n        <div className={styles.popupWrapper}>\r\n          <button\r\n            type=\"button\"\r\n            className={styles.popupCloseButton}\r\n            onClick={() => setGameEnd(!gameEnd)}\r\n          >\r\n            CLOSE\r\n          </button>\r\n          <div className={styles.popup}>\r\n            <span className={styles.popupTitle}>GAME OVER</span>\r\n            <button\r\n              type=\"button\"\r\n              className={styles.popupButton}\r\n              onClick={() => {\r\n                grid.current = initGameGrid();\r\n                setPressedKey('restart');\r\n                setGameEnd(!gameEnd);\r\n              }}\r\n            >\r\n              PLAY AGAIN\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {gameWon && (\r\n        <div className={styles.popupWrapper}>\r\n          <button\r\n            type=\"button\"\r\n            className={styles.popupCloseButton}\r\n            onClick={() => setGameWon(!gameWon)}\r\n          >\r\n            CLOSE\r\n          </button>\r\n          <div className={styles.popup}>\r\n            <span className={styles.popupTitle}>YOU WON</span>\r\n            <button\r\n              className={styles.popupButton}\r\n              type=\"button\"\r\n              onClick={() => setGameWon(!gameWon)}\r\n            >\r\n              CONTINUE PLAYING\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className={styles.gridWrapper}>\r\n        {grid.current.map((cell) => {\r\n          return (\r\n            <div\r\n              className={styles.cell}\r\n              key={uuid()}\r\n              style={{\r\n                backgroundColor: calculateColor(cell),\r\n                color: cell === 0 ? 'transparent' : ' rgb(60, 60, 60)',\r\n                fontSize: calculateFontSize(cell),\r\n              }}\r\n            >\r\n              <div className={styles.number}>{cell}</div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      {controlButtons && (\r\n        <div className={styles.controlsWrapper}>\r\n          <div className={styles.controlButtonWrapper}>\r\n            <button\r\n              type=\"button\"\r\n              className={styles.controlButton}\r\n              onClick={() => setPressedKey('ArrowUp')}\r\n            >\r\n              UP\r\n            </button>\r\n          </div>\r\n          <div className={styles.controlButtonWrapper}>\r\n            <button\r\n              type=\"button\"\r\n              className={styles.controlButton}\r\n              onClick={() => setPressedKey('ArrowLeft')}\r\n            >\r\n              LEFT\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className={styles.controlButton}\r\n              onClick={() => setPressedKey('ArrowRight')}\r\n            >\r\n              RIGHT\r\n            </button>\r\n          </div>\r\n          <div className={styles.controlButtonWrapper}>\r\n            <button\r\n              type=\"button\"\r\n              className={styles.controlButton}\r\n              onClick={() => setPressedKey('ArrowDown')}\r\n            >\r\n              DOWN\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className={styles.rules}>\r\n        HOW TO PLAY: Use your arrow keys (or controls on screen) to move the tiles. Tiles with the\r\n        same number merge into one when they touch. Add them up to reach 2048!\r\n        <button\r\n          type=\"button\"\r\n          className={styles.showArrowsButton}\r\n          onClick={() => {\r\n            setControlButtons(!controlButtons);\r\n          }}\r\n        >\r\n          {controlButtons ? 'HIDE CONTROLS' : 'SHOW CONTROLS'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport { App } from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}