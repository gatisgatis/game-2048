[{"D:\\Desktop\\game-2048\\src\\index.tsx":"1","D:\\Desktop\\game-2048\\src\\reportWebVitals.ts":"2","D:\\Desktop\\game-2048\\src\\App.tsx":"3","D:\\Desktop\\game-2048\\src\\helpers\\helpers.ts":"4","D:\\Desktop\\game-2048\\src\\helpers\\helpers-ui.ts":"5"},{"size":529,"mtime":1607607524811,"results":"6","hashOfConfig":"7"},{"size":442,"mtime":1607552500503,"results":"8","hashOfConfig":"7"},{"size":5956,"mtime":1607785231434,"results":"9","hashOfConfig":"7"},{"size":5448,"mtime":1607708102956,"results":"10","hashOfConfig":"7"},{"size":513,"mtime":1607785270951,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"19nykmk",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Desktop\\game-2048\\src\\index.tsx",[],["24","25","26","27","28","29","30","31"],"D:\\Desktop\\game-2048\\src\\reportWebVitals.ts",[],"D:\\Desktop\\game-2048\\src\\App.tsx",["32"],"import React, { FC, useState, useEffect, useRef } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport styles from './App.module.scss';\r\nimport {\r\n  handlePressedKey,\r\n  calculateResult,\r\n  isGameOver,\r\n  isGameWon,\r\n  initGameGrid,\r\n} from './helpers/helpers';\r\nimport { calculateColor, calculateFontSize } from './helpers/helpers-ui';\r\n\r\nexport const App: FC = () => {\r\n  const [pressedKey, setPressedKey] = useState('');\r\n  const [gameEnd, setGameEnd] = useState(false);\r\n  const [gameWon, setGameWon] = useState(false);\r\n  const [controlButtons, setControlButtons] = useState(false);\r\n\r\n  const grid = useRef(initGameGrid());\r\n  const result = useRef(calculateResult(grid.current));\r\n  const bestResult = useRef(10000);\r\n\r\n  const keyboardFunction = (event: KeyboardEvent) => {\r\n    setPressedKey(event.key);\r\n  };\r\n\r\n  const addKeyBoardListener = () => {\r\n    document.body.addEventListener('keydown', keyboardFunction);\r\n  };\r\n\r\n  const removeKeyBoardListener = () => {\r\n    document.body.removeEventListener('keydown', keyboardFunction);\r\n  };\r\n\r\n  useEffect(() => {\r\n    addKeyBoardListener();\r\n    return () => {\r\n      removeKeyBoardListener();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (pressedKey) {\r\n      grid.current = handlePressedKey(grid.current, pressedKey);\r\n      result.current = calculateResult(grid.current);\r\n      if (isGameOver(grid.current)) {\r\n        setGameEnd(true);\r\n      }\r\n      if (isGameWon(grid.current)) {\r\n        setGameWon(true);\r\n      }\r\n      setPressedKey('');\r\n    }\r\n  }, [pressedKey]);\r\n\r\n  return (\r\n    <div className={styles.contentWrapper}>\r\n      <div className={styles.header}>\r\n        <div className={styles.title}>\r\n          <span className={styles.titleBig}>2048 </span>\r\n          <span className={styles.titleSmall}>THE GAME</span>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className={styles.restartButton}\r\n          onClick={() => {\r\n            grid.current = initGameGrid();\r\n            setPressedKey('restart');\r\n          }}\r\n        >\r\n          RESTART\r\n        </button>\r\n        <div className={styles.scores}>\r\n          <div className={styles.best}>BEST: {bestResult.current}</div>\r\n          <div className={styles.currentScore}>SCORE: {result.current}</div>\r\n        </div>\r\n      </div>\r\n      {gameEnd && (\r\n        <div className={styles.popupWrapper}>\r\n          <button\r\n            type=\"button\"\r\n            className={styles.popupCloseButton}\r\n            onClick={() => setGameEnd(!gameEnd)}\r\n          >\r\n            CLOSE\r\n          </button>\r\n          <div className={styles.popup}>\r\n            <span className={styles.popupTitle}>GAME OVER</span>\r\n            <button\r\n              type=\"button\"\r\n              className={styles.popupButton}\r\n              onClick={() => {\r\n                grid.current = initGameGrid();\r\n                setPressedKey('restart');\r\n                setGameEnd(!gameEnd);\r\n              }}\r\n            >\r\n              PLAY AGAIN\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {gameWon && (\r\n        <div className={styles.popupWrapper}>\r\n          <button\r\n            type=\"button\"\r\n            className={styles.popupCloseButton}\r\n            onClick={() => setGameWon(!gameWon)}\r\n          >\r\n            CLOSE\r\n          </button>\r\n          <div className={styles.popup}>\r\n            <span className={styles.popupTitle}>YOU WON</span>\r\n            <button\r\n              className={styles.popupButton}\r\n              type=\"button\"\r\n              onClick={() => setGameWon(!gameWon)}\r\n            >\r\n              CONTINUE PLAYING\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className={styles.gridWrapper}>\r\n        {grid.current.map((cell) => {\r\n          return (\r\n            <div\r\n              className={styles.cell}\r\n              key={uuid()}\r\n              style={{\r\n                backgroundColor: calculateColor(cell),\r\n                color: cell === 0 ? 'transparent' : ' rgb(60, 60, 60)',\r\n                fontSize: calculateFontSize(cell),\r\n              }}\r\n            >\r\n              <div className={styles.number}>{cell}</div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      {controlButtons && (\r\n        <div className={styles.controlsWrapper}>\r\n          <div className={styles.controlButtonWrapper}>\r\n            <button\r\n              type=\"button\"\r\n              className={styles.controlButton}\r\n              onClick={() => setPressedKey('ArrowUp')}\r\n            >\r\n              UP\r\n            </button>\r\n          </div>\r\n          <div className={styles.controlButtonWrapper}>\r\n            <button\r\n              type=\"button\"\r\n              className={styles.controlButton}\r\n              onClick={() => setPressedKey('ArrowLeft')}\r\n            >\r\n              LEFT\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className={styles.controlButton}\r\n              onClick={() => setPressedKey('ArrowRight')}\r\n            >\r\n              RIGHT\r\n            </button>\r\n          </div>\r\n          <div className={styles.controlButtonWrapper}>\r\n            <button\r\n              type=\"button\"\r\n              className={styles.controlButton}\r\n              onClick={() => setPressedKey('ArrowDown')}\r\n            >\r\n              DOWN\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className={styles.rules}>\r\n        HOW TO PLAY: Use your arrow keys (or controls on screen) to move the tiles. Tiles with the\r\n        same number merge into one when they touch. Add them up to reach 2048!\r\n        <button\r\n          type=\"button\"\r\n          className={styles.showArrowsButton}\r\n          onClick={() => {\r\n            setControlButtons(!controlButtons);\r\n          }}\r\n        >\r\n          {controlButtons ? 'HIDE CONTROLS' : 'SHOW CONTROLS'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\Desktop\\game-2048\\src\\helpers\\helpers.ts",[],"D:\\Desktop\\game-2048\\src\\helpers\\helpers-ui.ts",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":40,"column":6,"nodeType":"51","endLine":40,"endColumn":8,"suggestions":"52"},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"jsx-a11y/accessible-emoji",[],"lines-around-directive",["55"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addKeyBoardListener' and 'removeKeyBoardListener'. Either include them or remove the dependency array.","ArrayExpression",["56"],"no-global-assign","no-unsafe-negation","padding-line-between-statements",{"desc":"57","fix":"58"},"Update the dependencies array to be: [addKeyBoardListener, removeKeyBoardListener]",{"range":"59","text":"60"},[1174,1176],"[addKeyBoardListener, removeKeyBoardListener]"]