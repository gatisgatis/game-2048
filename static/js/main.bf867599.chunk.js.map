{"version":3,"sources":["helpers/helpers.ts","App.tsx","reportWebVitals.ts","index.tsx","App.module.scss"],"names":["PARSED_KEYS","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","makeOneDimensionArray","length","fill","times","Math","floor","output","i","push","addNewNumberInGame","arr","stopLoop","index","_","random","splitArrayInRows","direction","rows","slice","row","j","mergeOneRow","oneRow","handlePressedKey","key","Object","keys","includes","prevGrid","newGrid","forEach","reverse","mergeNumbers","rowNoZeros","filter","number","zerosCount","rowZeros","newRow","moveNumbers","isEqual","calculateResult","reduce","res","num","App","useState","pressedKey","setPressedKey","gameEnd","setGameEnd","gameWon","setGameWon","grid","useRef","initGameGrid","result","current","useEffect","document","body","addEventListener","event","removeEventListener","isRightUnable","isLeftUnable","isUpUnable","isDownUnable","isGameOver","className","styles","wrapper","map","cell","style","backgroundColor","uuid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"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","file":"static/js/main.bf867599.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\r\nimport _ from 'lodash';\r\n\r\ntype Direction = 'up' | 'down' | 'left' | 'right';\r\n\r\nconst PARSED_KEYS: { [key: string]: Direction } = {\r\n  ArrowUp: 'up',\r\n  ArrowDown: 'down',\r\n  ArrowLeft: 'left',\r\n  ArrowRight: 'right',\r\n};\r\n\r\nexport const generate2or4randomly = () => {\r\n  return _.random(10, true) > 9 ? 4 : 2;\r\n};\r\n\r\nexport const makeOneDimensionArray = <T>(length: number, fill: T) => {\r\n  const times = Math.floor(length);\r\n  const output: T[] = [];\r\n  for (let i = 0; i < times; i++) {\r\n    output.push(fill);\r\n  }\r\n  return output;\r\n};\r\n\r\nexport const addNewNumberInGame = (arr: number[]) => {\r\n  const output = [...arr];\r\n\r\n  // while version\r\n  let stopLoop = false;\r\n  while (!stopLoop) {\r\n    const index = _.random(0, arr.length - 1);\r\n    if (!output[index]) {\r\n      output[index] = generate2or4randomly();\r\n      stopLoop = true;\r\n    }\r\n  }\r\n  // recursion version\r\n  //   const index = _.random(0, arr.length-1);\r\n  //   const output = [...arr];\r\n  //   if (output[index] === 0) {\r\n  //     output[index] = generate2or4randomly();\r\n  //   } else {\r\n  //     addNewNumberInGame(arr);\r\n  //   }\r\n  return output;\r\n};\r\n\r\nexport const initGameGrid = () => {\r\n  let output = makeOneDimensionArray(16, 0);\r\n  output = addNewNumberInGame(output);\r\n  return addNewNumberInGame(output);\r\n};\r\n\r\nexport const splitArrayInRows = (arr: number[], direction: Direction) => {\r\n  // array containing 4 game rows\r\n  const rows: number[][] = [];\r\n  // splits array in 4 rows\r\n  if (direction === 'left' || direction === 'right')\r\n    for (let i = 0; i < 4; i++) {\r\n      rows.push(arr.slice(i * 4, i * 4 + 4));\r\n    }\r\n  // splits array in 4 columns making them as rows temporary\r\n  if (direction === 'up' || direction === 'down') {\r\n    for (let i = 0; i < 4; i++) {\r\n      const row = [];\r\n      for (let j = 0; j < 4; j++) {\r\n        row.push(arr[i + j * 4]);\r\n      }\r\n      rows.push(row);\r\n    }\r\n  }\r\n  return rows;\r\n};\r\n\r\nexport const moveNumbers = (arr: number[], direction: Direction) => {\r\n  const output: number[] = [];\r\n  const rows = splitArrayInRows(arr, direction);\r\n  rows.forEach((row, index) => {\r\n    // filters out only non zero elements\r\n    const rowNoZeros = row.filter((number) => number);\r\n    // calculates zero count in that row\r\n    const zerosCount = 4 - rowNoZeros.length;\r\n    // makes corresponding zeros part of the row\r\n    const rowZeros = makeOneDimensionArray(zerosCount, 0);\r\n    // combines them according to given direction and push them in output array\r\n    let newRow: number[] = [];\r\n    if (direction === 'right') {\r\n      newRow = [...rowZeros, ...rowNoZeros];\r\n      output.push(...newRow);\r\n    } else if (direction === 'left') {\r\n      newRow = [...rowNoZeros, ...rowZeros];\r\n      output.push(...newRow);\r\n    } else if (direction === 'up') {\r\n      newRow = [...rowNoZeros, ...rowZeros];\r\n      for (let i = 0; i < 4; i++) {\r\n        output[i * 4 + index] = newRow[i];\r\n      }\r\n    } else {\r\n      newRow = [...rowZeros, ...rowNoZeros];\r\n      for (let i = 0; i < 4; i++) {\r\n        output[i * 4 + index] = newRow[i];\r\n      }\r\n    }\r\n  });\r\n  return output;\r\n};\r\n\r\nexport const mergeOneRow = (oneRow: number[]) => {\r\n  const row = [...oneRow];\r\n  for (let i = 3; i > 0; i--) {\r\n    for (let j = i - 1; j >= 0; j--) {\r\n      if (row[i] && row[j]) {\r\n        if (row[i] !== row[j]) {\r\n          break;\r\n        } else {\r\n          row[i] *= 2;\r\n          row[j] = 0;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return row;\r\n};\r\n\r\nexport const mergeNumbers = (arr: number[], direction: Direction) => {\r\n  const output: number[] = [];\r\n  const rows = splitArrayInRows(arr, direction);\r\n  rows.forEach((row, index) => {\r\n    switch (direction) {\r\n      case 'right':\r\n        output.push(...mergeOneRow(row));\r\n        break;\r\n      case 'left':\r\n        row.reverse();\r\n        output.push(...mergeOneRow(row).reverse());\r\n        break;\r\n      case 'up':\r\n        row.reverse();\r\n        row = mergeOneRow(row).reverse();\r\n        for (let i = 0; i < 4; i++) {\r\n          output[i * 4 + index] = row[i];\r\n        }\r\n        break;\r\n      case 'down':\r\n        row = mergeOneRow(row);\r\n        for (let i = 0; i < 4; i++) {\r\n          output[i * 4 + index] = row[i];\r\n        }\r\n        break;\r\n    }\r\n  });\r\n  return output;\r\n};\r\n\r\nexport const handlePressedKey = (arr: number[], key: string) => {\r\n  if (!Object.keys(PARSED_KEYS).includes(key)) {\r\n    return [...arr];\r\n  }\r\n  const direction = PARSED_KEYS[`${key}`];\r\n  const prevGrid = [...arr];\r\n  let newGrid = mergeNumbers(arr, direction);\r\n  newGrid = moveNumbers(newGrid, direction);\r\n  if (!_.isEqual(prevGrid, newGrid)) {\r\n    newGrid = addNewNumberInGame(newGrid);\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nexport const calculateResult = (arr: number[]) => {\r\n  return arr.reduce((res, num) => res + num, 0);\r\n};\r\n\r\nexport const isGameOver = (arr: number[]) => {\r\n  const isRightUnable = _.isEqual(arr, handlePressedKey(arr, 'ArrowRight'));\r\n  const isLeftUnable = _.isEqual(arr, handlePressedKey(arr, 'ArrowLeft'));\r\n  const isUpUnable = _.isEqual(arr, handlePressedKey(arr, 'ArrowUp'));\r\n  const isDownUnable = _.isEqual(arr, handlePressedKey(arr, 'ArrowDown'));\r\n  if (isUpUnable && isDownUnable && isLeftUnable && isRightUnable) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const isGameWon = (arr: number[]) => {\r\n  if (arr.includes(2048)) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n","import React, { FC, useState, useEffect, useRef } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport styles from './App.module.scss';\r\nimport {\r\n  handlePressedKey,\r\n  calculateResult,\r\n  isGameOver,\r\n  isGameWon,\r\n  initGameGrid,\r\n} from './helpers/helpers';\r\n\r\nexport const App: FC = () => {\r\n  const [pressedKey, setPressedKey] = useState('');\r\n  const [gameEnd, setGameEnd] = useState(false);\r\n  const [gameWon, setGameWon] = useState(false);\r\n\r\n  const grid = useRef(initGameGrid());\r\n  const result = useRef(calculateResult(grid.current));\r\n\r\n  useEffect(() => {\r\n    document.body.addEventListener('keydown', (event) => {\r\n      setPressedKey(event.key);\r\n    });\r\n    return () => {\r\n      document.body.removeEventListener('keydown', (event) => {});\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (pressedKey) {\r\n      grid.current = handlePressedKey(grid.current, pressedKey);\r\n      result.current = calculateResult(grid.current);\r\n      if (isGameOver(grid.current)) {\r\n        setGameEnd(true);\r\n      }\r\n      if (isGameWon(grid.current)) {\r\n        setGameWon(true);\r\n      }\r\n      setPressedKey('');\r\n    }\r\n  }, [pressedKey]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <h1>2048 Game. Result: {result.current} </h1>\r\n        {gameEnd && <h1>GAME OVER!!!</h1>}\r\n        {gameWon && <h1>GAME WON!!!</h1>}\r\n        <div className={styles.wrapper}>\r\n          {grid.current.map((cell) => {\r\n            return (\r\n              <div\r\n                key={uuid()}\r\n                className={styles.cell}\r\n                style={{\r\n                  backgroundColor: `rgb(${200},${255 - cell * 2},${255 - cell * 0.5})`,\r\n                }}\r\n              >\r\n                {cell !== 0 && cell}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport { App } from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"App_body__8xAdc\",\"wrapper\":\"App_wrapper__2_6J1\",\"cell\":\"App_cell__Kvnv2\"};"],"sourceRoot":""}